% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/installGitHub.R
\name{installGitHub}
\alias{installGitHub}
\title{Install packages from GitHub}
\usage{
installGitHub(repo, tag, lib = .libPaths()[[1L]], reinstall = TRUE, ...)
}
\arguments{
\item{repo}{\code{character}.
Repository address(es) in the format \code{owner/repo}.}

\item{tag}{\code{character}.
Release version tag.
Specific release must match the tag on GitHub (e.g. \code{"v1.0.0"}).}

\item{lib}{\code{character}.
Destination library directory path.
Defaults to the first element of \code{.libPaths()}.}

\item{reinstall}{\code{logical(1)}.
Force reinstallation of any existing packages.}

\item{...}{Passthrough arguments to \code{install()}.}
}
\value{
Invisible \code{list}.
Metadata containing \code{repo}, \code{lib}, and whether packages were installed.
}
\description{
Install packages from GitHub
}
\details{
This variant doesn't require \code{GITHUB_PAT}.
If you have a \code{GITHUB_PAT} defined, can use \code{install()} directly instead.
Intended for use inside container images, where a PAT may not be used.
}
\note{
Updated 2021-08-23.
}
\section{GitHub API}{

\itemize{
\item All releases JSON:
\verb{https://api.github.com/repos/:owner/:repo/releases}
\item Latest release JSON:
\verb{https://api.github.com/repos/:owner/:repo/releases/latest}
\item Specific release JSON (requires numeric release ID, not tag name):
\verb{https://api.github.com/repos/:owner/:repo/releases/:release_id}
\item Specific tagged release tarball:
\verb{https://github.com/:owner/:repo/archive/:tag.tar.gz}
}
}

\examples{
testlib <- file.path(tempdir(), "testlib")
unlink(testlib, recursive = TRUE)
out <- installGitHub(
    repo = "acidgenomics/r-goalie",
    tag = "v0.5.2",
    dependencies = FALSE,
    lib = testlib,
    reinstall = TRUE
)
print(out)
list.dirs(path = testlib, full.names = FALSE, recursive = FALSE)
unlink(testlib, recursive = TRUE)
}
\seealso{
\itemize{
\item \code{remotes::install_github()}.
\item \code{install.packages()}.
}
}
